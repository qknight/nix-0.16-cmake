'\" t
.\"     Title: nix-env
.\"    Author: Eelco Dolstra
.\" Generator: DocBook XSL-NS Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: August 2010
.\"    Manual: Command Reference
.\"    Source: Nix 0.16
.\"  Language: English
.\"
.TH "NIX\-ENV" "1" "August 2010" "Nix 0\&.16" "Command Reference"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
nix-env \- manipulate or query Nix user environments
.SH "SYNOPSIS"
.HP \w'\fBnix\-env\fR\ 'u
\fBnix\-env\fR [\fB\-\-help\fR] [\fB\-\-version\fR] [\fB\-\-verbose\fR...] [\fB\-v\fR...] [\fB\-\-no\-build\-output\fR] [\fB\-Q\fR] [{\fB\-\-max\-jobs\fR\ |\ \fB\-j\fR}\ \fInumber\fR] [[\fB\-\-cores\fR]\ \fInumber\fR] [[\fB\-\-max\-silent\-time\fR]\ \fInumber\fR] [\fB\-\-keep\-going\fR] [\fB\-k\fR] [\fB\-\-keep\-failed\fR] [\fB\-K\fR] [\fB\-\-fallback\fR] [\fB\-\-readonly\-mode\fR] [\fB\-\-log\-type\fR\ \fItype\fR] [\fB\-\-show\-trace\fR]
.br
[\fB\-\-arg\fR\ \fIname\fR\ \fIvalue\fR] [\fB\-\-argstr\fR\ \fIname\fR\ \fIvalue\fR] [{\fB\-\-file\fR\ |\ \fB\-f\fR}\ \fIpath\fR] [{\fB\-\-profile\fR\ |\ \fB\-p\fR}\ \fIpath\fR] [\fB\-\-system\-filter\fR\ \fIsystem\fR] [\fB\-\-dry\-run\fR] \fIoperation\fR [\fIoptions\fR...] [\fIarguments\fR...]
.SH "DESCRIPTION"
.PP
The command
\fBnix\-env\fR
is used to manipulate Nix user environments\&. User environments are sets of software packages available to a user at some point in time\&. In other words, they are a synthesised view of the programs available in the Nix store\&. There may be many user environments: different users can have different environments, and individual users can switch between different environments\&.
.PP
\fBnix\-env\fR
takes exactly one
\fIoperation\fR
flag which indicates the subcommand to be performed\&. These are documented below\&.
.SH "COMMON OPTIONS"
.PP
This section lists the options that are common to all operations\&. These options are allowed for every subcommand, though they may not always have an effect\&. See also
Section\ \&A.1, \(lqCommon options\(rq\&.
.PP
\fB\-\-file\fR, \fB\-f\fR
.RS 4
Specifies the Nix expression (designated below as the
\fIactive Nix expression\fR) used by the
\fB\-\-install\fR,
\fB\-\-upgrade\fR, and
\fB\-\-query \-\-available\fR
operations to obtain derivations\&. The default is
~/\&.nix\-defexpr\&.
.RE
.PP
\fB\-\-profile\fR, \fB\-p\fR
.RS 4
Specifies the profile to be used by those operations that operate on a profile (designated below as the
\fIactive profile\fR)\&. A profile is sequence of user environments called
\fIgenerations\fR, one of which is the
\fIcurrent generation\fR\&. The default profile is the target of the symbolic link
~/\&.nix\-profile
(see below)\&.
.RE
.PP
\fB\-\-dry\-run\fR
.RS 4
For the
\fB\-\-install\fR,
\fB\-\-upgrade\fR,
\fB\-\-uninstall\fR,
\fB\-\-switch\-generation\fR
and
\fB\-\-rollback\fR
operations, this flag will cause
\fBnix\-env\fR
to print what
\fIwould\fR
be done if this flag had not been specified, without actually doing it\&.
.sp
\fB\-\-dry\-run\fR
also prints out which paths will be
substituted
(i\&.e\&., downloaded) and which paths will be built from source (because no substitute is available)\&.
.RE
.PP
\fB\-\-system\-filter\fR \fIsystem\fR
.RS 4
By default, operations such as
\fB\-\-query \-\-available\fR
only include derivations matching the current platform\&. This option allows you to use derivations for the specified platform
\fIsystem\fR\&. The special value
*
causes derivations for any platform to be included\&.
.RE
.SH "FILES"
.PP
~/\&.nix\-defexpr
.RS 4
A directory that contains the default Nix expressions used by the
\fB\-\-install\fR,
\fB\-\-upgrade\fR, and
\fB\-\-query \-\-available\fR
operations to obtain derivations\&. The
\fB\-\-file\fR
option may be used to override this default\&.
.sp
The Nix expressions in this directory are combined into a single attribute set, with each file as an attribute that has the name of the file\&. Thus, if
~/\&.nix\-defexpr
contains two files,
foo
and
bar, then the default Nix expression will essentially be
.sp
.if n \{\
.RS 4
.\}
.nf
{
  foo = import ~/\&.nix\-defexpr/foo;
  bar = import ~/\&.nix\-defexpr/bar;
}
.fi
.if n \{\
.RE
.\}
.sp
The command
\fBnix\-channel\fR
places symlinks to the downloaded Nix expressions from each subscribed channel in this directory\&.
.RE
.PP
~/\&.nix\-profile
.RS 4
A symbolic link to the user\'s current profile\&. By default, this symlink points to
\fIprefix\fR/var/nix/profiles/default\&. The
\fBPATH\fR
environment variable should include
~/\&.nix\-profile/bin
for the user environment to be visible to the user\&.
.RE
.SH "OPERATION \-\-INSTALL"
.SS "Synopsis"
.HP \w'\fBnix\-env\fR\ 'u
\fBnix\-env\fR {\fB\-\-install\fR | \fB\-i\fR} [{\fB\-\-prebuilt\-only\fR\ |\ \fB\-b\fR}] [{\fB\-\-attr\fR\ |\ \fB\-A\fR}] [\fB\-\-from\-expression\fR] [\fB\-E\fR] [\fB\-\-from\-profile\fR\ \fIpath\fR] [\fB\-\-preserve\-installed\fR | \fB\-P\fR] \fIargs\fR...
.SS "Description"
.PP
The install operation creates a new user environment, based on the current generation of the active profile, to which a set of store paths described by
\fIargs\fR
is added\&. The arguments
\fIargs\fR
map to store paths in a number of possible ways:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
By default,
\fIargs\fR
is a set of derivation names denoting derivations in the active Nix expression\&. These are realised, and the resulting output paths are installed\&. Currently installed derivations with a name equal to the name of a derivation being added are removed unless the option
\fB\-\-preserve\-installed\fR
is specified\&.
.sp
If there are multiple derivations matching a name in
\fIargs\fR
that have the same name (e\&.g\&.,
gcc\-3\&.3\&.6
and
gcc\-4\&.1\&.1), then the derivation with the highest
\fIpriority\fR
is used\&. A derivation can define a priority by declaring the
\fImeta\&.priority\fR
attribute\&. This attribute should be a number, with a higher value denoting a lower priority\&. The default priority is
0\&.
.sp
If there are multiple matching derivations with the same priority, then the derivation with the highest version will be installed\&.
.sp
You can force the installation of multiple derivations with the same name by being specific about the versions\&. For instance,
nix\-env \-i gcc\-3\&.3\&.6 gcc\-4\&.1\&.1
will install both version of GCC (and will probably cause a user environment conflict!)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
\fB\-\-attr\fR
(\fB\-A\fR) is specified, the arguments are
\fIattribute paths\fR
that select attributes from the top\-level Nix expression\&. This is faster than using derivation names and unambiguous\&. To find out the attribute paths of available packages, use
nix\-env \-qaA \'*\'\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
\fB\-\-from\-profile\fR
\fIpath\fR
is given,
\fIargs\fR
is a set of names denoting installed store paths in the profile
\fIpath\fR\&. This is an easy way to copy user environment elements from one profile to another\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
\fB\-\-from\-expression\fR
is given,
\fIargs\fR
are Nix
functions
that are called with the active Nix expression as their single argument\&. The derivations returned by those function calls are installed\&. This allows derivations to be specified in a unambiguous way, which is necessary if there are multiple derivations with the same name\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
\fIargs\fR
are store derivations, then these are
realised, and the resulting output paths are installed\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
\fIargs\fR
are store paths that are not store derivations, then these are
realised
and installed\&.
.RE
.sp
.RE
.SS "Flags"
.PP
\fB\-\-prebuild\-only\fR / \fB\-b\fR
.RS 4
Use only derivations for which a substitute is registered, i\&.e\&., there is a pre\-built binary available that can be downloaded in lieu of building the derivation\&. Thus, no packages will be built from source\&.
.RE
.PP
\fB\-\-preserve\-installed\fR, \fB\-P\fR
.RS 4
Do not remove derivations with a name matching one of the derivations being installed\&. Usually, trying to have two versions of the same package installed in the same generation of a profile will lead to an error in building the generation, due to file name clashes between the two versions\&. However, this is not the case for all packages\&.
.RE
.SS "Examples"
.PP
To install a specific version of
\fBgcc\fR
from the active Nix expression:
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-env \-\-install gcc\-3\&.3\&.2 
installing `gcc\-3\&.3\&.2\'
uninstalling `gcc\-3\&.1\'
.fi
.if n \{\
.RE
.\}
.sp
Note the the previously installed version is removed, since
\fB\-\-preserve\-installed\fR
was not specified\&.
.PP
To install an arbitrary version:
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-env \-\-install gcc
installing `gcc\-3\&.3\&.2\'
.fi
.if n \{\
.RE
.\}
.PP
To install using a specific attribute:
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-env \-i \-A gcc40mips
$ nix\-env \-i \-A xorg\&.xorgserver
.fi
.if n \{\
.RE
.\}
.PP
To install all derivations in the Nix expression
foo\&.nix:
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-env \-f ~/foo\&.nix \-i \'*\'
.fi
.if n \{\
.RE
.\}
.PP
To copy the store path with symbolic name
gcc
from another profile:
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-env \-i \-\-from\-profile /nix/var/nix/profiles/foo \-i gcc
.fi
.if n \{\
.RE
.\}
.PP
To install a specific store derivation (typically created by
\fBnix\-instantiate\fR):
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-env \-i /nix/store/fibjb1bfbpm5mrsxc4mh2d8n37sxh91i\-gcc\-3\&.4\&.3\&.drv
.fi
.if n \{\
.RE
.\}
.PP
To install a specific output path:
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-env \-i /nix/store/y3cgx0xj1p4iv9x0pnnmdhr8iyg741vk\-gcc\-3\&.4\&.3
.fi
.if n \{\
.RE
.\}
.PP
To install from a Nix expression specified on the command\-line:
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-env \-f \&./foo\&.nix \-i \-E \e
    \'f: (f {system = "i686\-linux";})\&.subversionWithJava\'
.fi
.if n \{\
.RE
.\}
.sp
I\&.e\&., this evaluates to
(f: (f {system = "i686\-linux";})\&.subversionWithJava) (import \&./foo\&.nix), thus selecting the
subversionWithJava
attribute from the attribute set returned by calling the function defined in
\&./foo\&.nix\&.
.PP
A dry\-run tells you which paths will be downloaded or built from source:
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-env \-f pkgs/top\-level/all\-packages\&.nix \-i f\-spot \-\-dry\-run
(dry run; not doing anything)
installing `f\-spot\-0\&.0\&.10\'
the following derivations will be built:
  /nix/store/0g63jv9aagwbgci4nnzs2dkxqz84kdja\-libgnomeprintui\-2\&.12\&.1\&.tar\&.bz2\&.drv
  /nix/store/0gfarvxq6sannsdw8a1ir40j1ys2mqb4\-ORBit2\-2\&.14\&.2\&.tar\&.bz2\&.drv
  /nix/store/0i9gs5zc04668qiy60ga2rc16abkj7g8\-sqlite\-2\&.8\&.17\&.drv
  \fI\&.\&.\&.\fR
the following paths will be substituted:
  /nix/store/8zbipvm4gp9jfqh9nnk1n3bary1a37gs\-perl\-XML\-Parser\-2\&.34
  /nix/store/b8a2bg7gnyvvvjjibp4axg9x1hzkw36c\-mono\-1\&.1\&.4
  \fI\&.\&.\&.\fR
.fi
.if n \{\
.RE
.\}
.sp
.SH "OPERATION \-\-UPGRADE"
.SS "Synopsis"
.HP \w'\fBnix\-env\fR\ 'u
\fBnix\-env\fR {\fB\-\-upgrade\fR | \fB\-u\fR} [{\fB\-\-prebuilt\-only\fR\ |\ \fB\-b\fR}] [{\fB\-\-attr\fR\ |\ \fB\-A\fR}] [\fB\-\-from\-expression\fR] [\fB\-E\fR] [\fB\-\-from\-profile\fR\ \fIpath\fR] [\fB\-\-lt\fR | \fB\-\-leq\fR | \fB\-\-eq\fR | \fB\-\-always\fR] \fIargs\fR...
.SS "Description"
.PP
The upgrade operation creates a new user environment, based on the current generation of the active profile, in which all store paths are replaced for which there are newer versions in the set of paths described by
\fIargs\fR\&. Paths for which there are no newer versions are left untouched; this is not an error\&. It is also not an error if an element of
\fIargs\fR
matches no installed derivations\&.
.PP
For a description of how
\fIargs\fR
is mapped to a set of store paths, see
\fB\-\-install\fR\&. If
\fIargs\fR
describes multiple store paths with the same symbolic name, only the one with the highest version is installed\&.
.SS "Flags"
.PP
\fB\-\-lt\fR
.RS 4
Only upgrade a derivation to newer versions\&. This is the default\&.
.RE
.PP
\fB\-\-leq\fR
.RS 4
In addition to upgrading to newer versions, also \(lqupgrade\(rq to derivations that have the same version\&. Version are not a unique identification of a derivation, so there may be many derivations that have the same version\&. This flag may be useful to force \(lqsynchronisation\(rq between the installed and available derivations\&.
.RE
.PP
\fB\-\-eq\fR
.RS 4
\fIOnly\fR
\(lqupgrade\(rq to derivations that have the same version\&. This may not seem very useful, but it actually is, e\&.g\&., when there is a new release of Nixpkgs and you want to replace installed applications with the same versions built against newer dependencies (to reduce the number of dependencies floating around on your system)\&.
.RE
.PP
\fB\-\-always\fR
.RS 4
In addition to upgrading to newer versions, also \(lqupgrade\(rq to derivations that have the same or a lower version\&. I\&.e\&., derivations may actually be downgraded depending on what is available in the active Nix expression\&.
.RE
.PP
For the other flags, see
\fB\-\-install\fR\&.
.SS "Examples"
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-env \-\-upgrade gcc
upgrading `gcc\-3\&.3\&.1\' to `gcc\-3\&.4\'

$ nix\-env \-u gcc\-3\&.3\&.2 \-\-always (switch to a specific version)
upgrading `gcc\-3\&.4\' to `gcc\-3\&.3\&.2\'

$ nix\-env \-\-upgrade pan
(no upgrades available, so nothing happens)

$ nix\-env \-u \'*\' (try to upgrade everything)
upgrading `hello\-2\&.1\&.2\' to `hello\-2\&.1\&.3\'
upgrading `mozilla\-1\&.2\' to `mozilla\-1\&.4\'
.fi
.if n \{\
.RE
.\}
.SS "Versions"
.PP
The upgrade operation determines whether a derivation
\fIy\fR
is an upgrade of a derivation
\fIx\fR
by looking at their respective
name
attributes\&. The names (e\&.g\&.,
gcc\-3\&.3\&.1
are split into two parts: the package name (gcc), and the version (3\&.3\&.1)\&. The version part starts after the first dash not following by a letter\&.
\fIx\fR
is considered an upgrade of
\fIy\fR
if their package names match, and the version of
\fIy\fR
is higher that that of
\fIx\fR\&.
.PP
The versions are compared by splitting them into contiguous components of numbers and letters\&. E\&.g\&.,
3\&.3\&.1pre5
is split into
[3, 3, 1, "pre", 5]\&. These lists are then compared lexicographically (from left to right)\&. Corresponding components
\fIa\fR
and
\fIb\fR
are compared as follows\&. If they are both numbers, integer comparison is used\&. If
\fIa\fR
is an empty string and
\fIb\fR
is a number,
\fIa\fR
is considered less than
\fIb\fR\&. The special string component
pre
(for
\fIpre\-release\fR) is considered to be less than other components\&. String components are considered less than number components\&. Otherwise, they are compared lexicographically (i\&.e\&., using case\-sensitive string comparison)\&.
.PP
This is illustrated by the following examples:
.sp
.if n \{\
.RS 4
.\}
.nf
1\&.0 < 2\&.3
2\&.1 < 2\&.3
2\&.3 = 2\&.3
2\&.5 > 2\&.3
3\&.1 > 2\&.3
2\&.3\&.1 > 2\&.3
2\&.3\&.1 > 2\&.3a
2\&.3pre1 < 2\&.3
2\&.3pre3 < 2\&.3pre12
2\&.3a < 2\&.3c
2\&.3pre1 < 2\&.3c
2\&.3pre1 < 2\&.3q
.fi
.if n \{\
.RE
.\}
.sp
.SH "OPERATION \-\-UNINSTALL"
.SS "Synopsis"
.HP \w'\fBnix\-env\fR\ 'u
\fBnix\-env\fR {\fB\-\-uninstall\fR | \fB\-e\fR} \fIdrvnames\fR...
.SS "Description"
.PP
The uninstall operation creates a new user environment, based on the current generation of the active profile, from which the store paths designated by the symbolic names
\fInames\fR
are removed\&.
.SS "Examples"
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-env \-\-uninstall gcc
$ nix\-env \-e \'*\' (remove everything)
.fi
.if n \{\
.RE
.\}
.SH "OPERATION \-\-SET\-FLAG"
.SS "Synopsis"
.HP \w'\fBnix\-env\fR\ 'u
\fBnix\-env\fR \fB\-\-set\-flag\fR \fIname\fR \fIvalue\fR \fIdrvnames\fR...
.SS "Description"
.PP
The
\fB\-\-set\-flag\fR
operation allows meta attributes of installed packages to be modified\&. There are several attributes that can be usefully modified, because they affect the behaviour of
\fBnix\-env\fR
or the user environment build script:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fIpriority\fR
can be changed to resolve filename clashes\&. The user environment build script uses the
\fImeta\&.priority\fR
attribute of derivations to resolve filename collisions between packages\&. Lower priority values denote a higher priority\&. For instance, the GCC wrapper package and the Binutils package in Nixpkgs both have a file
bin/ld, so previously if you tried to install both you would get a collision\&. Now, on the other hand, the GCC wrapper declares a higher priority than Binutils, so the former\(cqs
bin/ld
is symlinked in the user environment\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fIkeep\fR
can be set to
true
to prevent the package from being upgraded or replaced\&. This is useful if you want to hang on to an older version of a package\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fIactive\fR
can be set to
false
to \(lqdisable\(rq the package\&. That is, no symlinks will be generated to the files of the package, but it remains part of the profile (so it won\(cqt be garbage\-collected)\&. It can be set back to
true
to re\-enable the package\&.
.RE
.sp
.RE
.SS "Examples"
.PP
To prevent the currently installed Firefox from being upgraded:
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-env \-\-set\-flag keep true firefox
.fi
.if n \{\
.RE
.\}
.sp
After this,
\fBnix\-env \-u\fR
will ignore Firefox\&.
.PP
To disable the currently installed Firefox, then install a new Firefox while the old remains part of the profile:
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-env \-q \e*
firefox\-2\&.0\&.0\&.9 (the current one)

$ nix\-env \-\-preserve\-installed \-i firefox\-2\&.0\&.0\&.11
installing `firefox\-2\&.0\&.0\&.11\'
building path(s) `/nix/store/myy0y59q3ig70dgq37jqwg1j0rsapzsl\-user\-environment\'
Collission between `/nix/store/\fI\&.\&.\&.\fR\-firefox\-2\&.0\&.0\&.11/bin/firefox\'
  and `/nix/store/\fI\&.\&.\&.\fR\-firefox\-2\&.0\&.0\&.9/bin/firefox\'\&.
(i\&.e\&., can\(cqt have two active at the same time)

$ nix\-env \-\-set\-flag active false firefox
setting flag on `firefox\-2\&.0\&.0\&.9\'

$ nix\-env \-\-preserve\-installed \-i firefox\-2\&.0\&.0\&.11
installing `firefox\-2\&.0\&.0\&.11\'

$ nix\-env \-q \e*
firefox\-2\&.0\&.0\&.11 (the enabled one)
firefox\-2\&.0\&.0\&.9 (the disabled one)
.fi
.if n \{\
.RE
.\}
.PP
To make files from
binutils
take precedence over files from
gcc:
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-env \-\-set\-flag priority 5 binutils
$ nix\-env \-\-set\-flag priority 10 gcc
.fi
.if n \{\
.RE
.\}
.sp
.SH "OPERATION \-\-QUERY"
.SS "Synopsis"
.HP \w'\fBnix\-env\fR\ 'u
\fBnix\-env\fR {\fB\-\-query\fR | \fB\-q\fR} [\fB\-\-installed\fR | \fB\-\-available\fR | \fB\-a\fR]
.br
[{\fB\-\-status\fR\ |\ \fB\-s\fR}] [{\fB\-\-attr\-path\fR\ |\ \fB\-P\fR}] [\fB\-\-no\-name\fR] [{\fB\-\-compare\-versions\fR\ |\ \fB\-c\fR}] [\fB\-\-system\fR] [\fB\-\-drv\-path\fR] [\fB\-\-out\-path\fR] [\fB\-\-description\fR] [\fB\-\-meta\fR]
.br
[\fB\-\-xml\fR] [{\fB\-\-prebuilt\-only\fR\ |\ \fB\-b\fR}] [{\fB\-\-attr\fR\ |\ \fB\-A\fR}\ \fIattribute\-path\fR]
.br
\fInames\fR...
.SS "Description"
.PP
The query operation displays information about either the store paths that are installed in the current generation of the active profile (\fB\-\-installed\fR), or the derivations that are available for installation in the active Nix expression (\fB\-\-available\fR)\&. It only prints information about derivations whose symbolic name matches one of
\fInames\fR\&. The wildcard
*
shows all derivations\&.
.PP
The derivations are sorted by their
name
attributes\&.
.SS "Source selection"
.PP
The following flags specify the set of things on which the query operates\&.
.PP
\fB\-\-installed\fR
.RS 4
The query operates on the store paths that are installed in the current generation of the active profile\&. This is the default\&.
.RE
.PP
\fB\-\-available\fR, \fB\-a\fR
.RS 4
The query operates on the derivations that are available in the active Nix expression\&.
.RE
.SS "Queries"
.PP
The following flags specify what information to display about the selected derivations\&. Multiple flags may be specified, in which case the information is shown in the order given here\&. Note that the name of the derivation is shown unless
\fB\-\-no\-name\fR
is specified\&.
.PP
\fB\-\-xml\fR
.RS 4
Print the result in an XML representation suitable for automatic processing by other tools\&. The root element is called
items, which contains a
item
element for each available or installed derivation\&. The fields discussed below are all stored in attributes of the
item
elements\&.
.RE
.PP
\fB\-\-prebuild\-only\fR / \fB\-b\fR
.RS 4
Show only derivations for which a substitute is registered, i\&.e\&., there is a pre\-built binary available that can be downloaded in lieu of building the derivation\&. Thus, this shows all packages that probably can be installed quickly\&.
.RE
.PP
\fB\-\-status\fR, \fB\-s\fR
.RS 4
Print the
\fIstatus\fR
of the derivation\&. The status consists of three characters\&. The first is
I
or
\-, indicating whether the derivation is currently installed in the current generation of the active profile\&. This is by definition the case for
\fB\-\-installed\fR, but not for
\fB\-\-available\fR\&. The second is
P
or
\-, indicating whether the derivation is present on the system\&. This indicates whether installation of an available derivation will require the derivation to be built\&. The third is
S
or
\-, indicating whether a substitute is available for the derivation\&.
.RE
.PP
\fB\-\-attr\-path\fR, \fB\-P\fR
.RS 4
Print the
\fIattribute path\fR
of the derivation, which can be used to unambiguously select it using the
\fB\-\-attr\fR option
available in commands that install derivations like
nix\-env \-\-install\&.
.RE
.PP
\fB\-\-no\-name\fR
.RS 4
Suppress printing of the
name
attribute of each derivation\&.
.RE
.PP
\fB\-\-compare\-versions\fR / \fB\-c\fR
.RS 4
Compare installed versions to available versions, or vice versa (if
\fB\-\-available\fR
is given)\&. This is useful for quickly seeing whether upgrades for installed packages are available in a Nix expression\&. A column is added with the following meaning:
.PP
< \fIversion\fR
.RS 4
A newer version of the package is available or installed\&.
.RE
.PP
= \fIversion\fR
.RS 4
At most the same version of the package is available or installed\&.
.RE
.PP
> \fIversion\fR
.RS 4
Only older versions of the package are available or installed\&.
.RE
.PP
\- ?
.RS 4
No version of the package is available or installed\&.
.RE
.sp
.RE
.PP
\fB\-\-system\fR
.RS 4
Print the
system
attribute of the derivation\&.
.RE
.PP
\fB\-\-drv\-path\fR
.RS 4
Print the path of the store derivation\&.
.RE
.PP
\fB\-\-out\-path\fR
.RS 4
Print the output path of the derivation\&.
.RE
.PP
\fB\-\-description\fR
.RS 4
Print a short (one\-line) description of the derivation, if available\&. The description is taken from the
meta\&.description
attribute of the derivation\&.
.RE
.PP
\fB\-\-meta\fR
.RS 4
Print all of the meta\-attributes of the derivation\&. This option is only available with
\fB\-\-xml\fR\&.
.RE
.SS "Examples"
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-env \-q \'*\' (show installed derivations)
bison\-1\&.875c
docbook\-xml\-4\&.2
firefox\-1\&.0\&.4
MPlayer\-1\&.0pre7
ORBit2\-2\&.8\&.3
\&.\&.\&.

$ nix\-env \-qa \'*\' (show available derivations)
firefox\-1\&.0\&.7
GConf\-2\&.4\&.0\&.1
MPlayer\-1\&.0pre7
ORBit2\-2\&.8\&.3
\&.\&.\&.

$ nix\-env \-qas \'*\' (show status of available derivations)
\-P\- firefox\-1\&.0\&.7   (not installed but present)
\-\-S GConf\-2\&.4\&.0\&.1   (not present, but there is a substitute for fast installation)
\-\-S MPlayer\-1\&.0pre3 (i\&.e\&., this is not the installed MPlayer, even though the version is the same!)
IP\- ORBit2\-2\&.8\&.3    (installed and by definition present)
\&.\&.\&.

(show available derivations in the Nix expression foo\&.nix)
$ nix\-env \-f \&./foo\&.nix \-qa \'*\' 
foo\-1\&.2\&.3

$ nix\-env \-qc \'*\' (compare installed versions to what\(cqs available)
\fI\&.\&.\&.\fR
acrobat\-reader\-7\&.0 \- ?      (package is not available at all)
autoconf\-2\&.59      = 2\&.59   (same version)
firefox\-1\&.0\&.4      < 1\&.0\&.7  (a more recent version is available)
\fI\&.\&.\&.\fR

(show info about a specific package, in XML)
$ nix\-env \-qa \-\-xml \-\-description firefox 
<?xml version=\'1\&.0\' encoding=\'utf\-8\'?>
<items>
  <item attrPath="0\&.0\&.firefoxWrapper"
    description="Mozilla Firefox \- the browser, reloaded (with various plugins)"
    name="firefox\-1\&.5\&.0\&.7" system="i686\-linux" />
</items>
.fi
.if n \{\
.RE
.\}
.SH "OPERATION \-\-SWITCH\-PROFILE"
.SS "Synopsis"
.HP \w'\fBnix\-env\fR\ 'u
\fBnix\-env\fR {\fB\-\-switch\-profile\fR | \fB\-S\fR} {\fIpath\fR}
.SS "Description"
.PP
This operation makes
\fIpath\fR
the current profile for the user\&. That is, the symlink
~/\&.nix\-profile
is made to point to
\fIpath\fR\&.
.SS "Examples"
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-env \-S ~/my\-profile
.fi
.if n \{\
.RE
.\}
.SH "OPERATION \-\-LIST\-GENERATIONS"
.SS "Synopsis"
.HP \w'\fBnix\-env\fR\ 'u
\fBnix\-env\fR \fB\-\-list\-generations\fR
.SS "Description"
.PP
This operation print a list of all the currently existing generations for the active profile\&. These may be switched to using the
\fB\-\-switch\-generation\fR
operation\&. It also prints the creation date of the generation, and indicates the current generation\&.
.SS "Examples"
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-env \-\-list\-generations
  95   2004\-02\-06 11:48:24
  96   2004\-02\-06 11:49:01
  97   2004\-02\-06 16:22:45
  98   2004\-02\-06 16:24:33   (current)
.fi
.if n \{\
.RE
.\}
.SH "OPERATION \-\-DELETE\-GENERATIONS"
.SS "Synopsis"
.HP \w'\fBnix\-env\fR\ 'u
\fBnix\-env\fR \fB\-\-delete\-generations\fR \fIgenerations\fR...
.SS "Description"
.PP
This operation deletes the specified generations of the current profile\&. The generations can be a list of generation numbers, or the special value
old
to delete all non\-current generations\&. Periodically deleting old generations is important to make garbage collection effective\&.
.SS "Examples"
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-env \-\-delete\-generations 3 4 8

$ nix\-env \-p other_profile \-\-delete\-generations old
.fi
.if n \{\
.RE
.\}
.SH "OPERATION \-\-SWITCH\-GENERATION"
.SS "Synopsis"
.HP \w'\fBnix\-env\fR\ 'u
\fBnix\-env\fR {\fB\-\-switch\-generation\fR | \fB\-G\fR} {\fIgeneration\fR}
.SS "Description"
.PP
This operation makes generation number
\fIgeneration\fR
the current generation of the active profile\&. That is, if the
\fIprofile\fR
is the path to the active profile, then the symlink
\fIprofile\fR
is made to point to
\fIprofile\fR\-\fIgeneration\fR\-link, which is in turn a symlink to the actual user environment in the Nix store\&.
.PP
Switching will fail if the specified generation does not exist\&.
.SS "Examples"
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-env \-G 42
switching from generation 50 to 42
.fi
.if n \{\
.RE
.\}
.SH "OPERATION \-\-ROLLBACK"
.SS "Synopsis"
.HP \w'\fBnix\-env\fR\ 'u
\fBnix\-env\fR \fB\-\-rollback\fR
.SS "Description"
.PP
This operation switches to the \(lqprevious\(rq generation of the active profile, that is, the highest numbered generation lower than the current generation, if it exists\&. It is just a convenience wrapper around
\fB\-\-list\-generations\fR
and
\fB\-\-switch\-generation\fR\&.
.SS "Examples"
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-env \-\-rollback
switching from generation 92 to 91

$ nix\-env \-\-rolback
error: no generation older than the current (91) exists
.fi
.if n \{\
.RE
.\}
.SH "AUTHOR"
.PP
\fBEelco Dolstra\fR
.br
Delft University of Technology, Department of Software Technology
.RS 4
Author
.RE
.SH "COPYRIGHT"
.br
Copyright \(co 2004, 2005, 2006, 2007, 2008, 2009, 2010 Eelco Dolstra
.br
