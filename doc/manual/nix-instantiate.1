'\" t
.\"     Title: nix-instantiate
.\"    Author: Eelco Dolstra
.\" Generator: DocBook XSL-NS Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: August 2010
.\"    Manual: Command Reference
.\"    Source: Nix 0.16
.\"  Language: English
.\"
.TH "NIX\-INSTANTIATE" "1" "August 2010" "Nix 0\&.16" "Command Reference"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
nix-instantiate \- instantiate store derivations from Nix expressions
.SH "SYNOPSIS"
.HP \w'\fBnix\-instantiate\fR\ 'u
\fBnix\-instantiate\fR [\fB\-\-help\fR] [\fB\-\-version\fR] [\fB\-\-verbose\fR...] [\fB\-v\fR...] [\fB\-\-no\-build\-output\fR] [\fB\-Q\fR] [{\fB\-\-max\-jobs\fR\ |\ \fB\-j\fR}\ \fInumber\fR] [[\fB\-\-cores\fR]\ \fInumber\fR] [[\fB\-\-max\-silent\-time\fR]\ \fInumber\fR] [\fB\-\-keep\-going\fR] [\fB\-k\fR] [\fB\-\-keep\-failed\fR] [\fB\-K\fR] [\fB\-\-fallback\fR] [\fB\-\-readonly\-mode\fR] [\fB\-\-log\-type\fR\ \fItype\fR] [\fB\-\-show\-trace\fR]
.br
[\fB\-\-arg\fR\ \fIname\fR\ \fIvalue\fR] [{\fB\-\-attr\fR\ |\ \fB\-A\fR}\ \fIattrPath\fR] [\fB\-\-add\-root\fR\ \fIpath\fR] [\fB\-\-indirect\fR] [{\fB\-\-parse\-only\fR\ |\ \fB\-\-eval\-only\fR\ [\fB\-\-strict\fR]\ }\ [\fB\-\-xml\fR]] \fIfiles\fR...
.SH "DESCRIPTION"
.PP
The command
\fBnix\-instantiate\fR
generates
store derivations
from (high\-level) Nix expressions\&. It loads and evaluates the Nix expressions in each of
\fIfiles\fR\&. Each top\-level expression should evaluate to a derivation, a list of derivations, or a set of derivations\&. The paths of the resulting store derivations are printed on standard output\&.
.PP
If
\fIfiles\fR
is the character
\-, then a Nix expression will be read from standard input\&.
.PP
Most users and developers don\(cqt need to use this command (\fBnix\-env\fR
and
\fBnix\-build\fR
perform store derivation instantiation from Nix expressions automatically)\&. It is most commonly used for implementing new deployment policies\&.
.PP
See also
Section\ \&A.1, \(lqCommon options\(rq
for a list of common options\&.
.SH "OPTIONS"
.PP
\fB\-\-add\-root\fR \fIpath\fR, \fB\-\-indirect\fR
.RS 4
See the
corresponding options
in
\fBnix\-store\fR\&.
.RE
.PP
\fB\-\-parse\-only\fR
.RS 4
Just parse the input files, and print their abstract syntax trees on standard output in ATerm format\&.
.RE
.PP
\fB\-\-eval\-only\fR
.RS 4
Just parse and evaluate the input files, and print the resulting values on standard output\&. No instantiation of store derivations takes place\&.
.RE
.PP
\fB\-\-xml\fR
.RS 4
When used with
\fB\-\-parse\-only\fR
and
\fB\-\-eval\-only\fR, print the resulting expression as an XML representation of the abstract syntax tree rather than as an ATerm\&. The schema is the same as that used by the
\fBtoXML\fR built\-in\&.
.RE
.PP
\fB\-\-strict\fR
.RS 4
When used with
\fB\-\-eval\-only\fR, recursively evaluate list elements and attributes\&. Normally, such sub\-expressions are left unevaluated (since the Nix expression language is lazy)\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBWarning\fR
.ps -1
.br
This option can cause non\-termination, because lazy data structures can be infinitely large\&.
.sp .5v
.RE
.RE
.SH "EXAMPLES"
.PP
Instantiating store derivations from a Nix expression, and building them using
\fBnix\-store\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-instantiate test\&.nix (instantiate)
/nix/store/cigxbmvy6dzix98dxxh9b6shg7ar5bvs\-perl\-BerkeleyDB\-0\&.26\&.drv

$ nix\-store \-r $(nix\-instantiate test\&.nix) (build)
\fI\&.\&.\&.\fR
/nix/store/qhqk4n8ci095g3sdp93x7rgwyh9rdvgk\-perl\-BerkeleyDB\-0\&.26 (output path)

$ ls \-l /nix/store/qhqk4n8ci095g3sdp93x7rgwyh9rdvgk\-perl\-BerkeleyDB\-0\&.26
dr\-xr\-xr\-x    2 eelco    users        4096 1970\-01\-01 01:00 lib
\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.PP
Parsing and evaluating Nix expressions:
.sp
.if n \{\
.RS 4
.\}
.nf
$ echo \'"foo" + "bar"\' | nix\-instantiate \-\-parse\-only \-
OpPlus(Str("foo"),Str("bar"))

$ echo \'"foo" + "bar"\' | nix\-instantiate \-\-eval\-only \-
Str("foobar")

$ echo \'"foo" + "bar"\' | nix\-instantiate \-\-eval\-only \-\-xml \-
<?xml version=\'1\&.0\' encoding=\'utf\-8\'?>
<expr>
  <string value="foobar" />
</expr>
.fi
.if n \{\
.RE
.\}
.PP
The difference between non\-strict and strict evaluation:
.sp
.if n \{\
.RS 4
.\}
.nf
$ echo \'rec { x = "foo"; y = x; }\' | nix\-instantiate \-\-eval\-only \-\-xml \-
\fI\&.\&.\&.\fR
    <attr name="x">
      <string value="foo" />
    </attr>
    <attr name="y">
      <unevaluated />
    </attr>
\fI\&.\&.\&.\fR
.fi
.if n \{\
.RE
.\}
.sp
Note that
\fIy\fR
is left unevaluated (the XML representation doesn\(cqt attempt to show non\-normal forms)\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$ echo \'rec { x = "foo"; y = x; }\' | nix\-instantiate \-\-eval\-only \-\-xml \-\-strict \-
\fI\&.\&.\&.\fR
    <attr name="x">
      <string value="foo" />
    </attr>
    <attr name="y">
      <string value="foo" />
    </attr>
\fI\&.\&.\&.\fR
.fi
.if n \{\
.RE
.\}
.sp
.SH "AUTHOR"
.PP
\fBEelco Dolstra\fR
.br
Delft University of Technology, Department of Software Technology
.RS 4
Author
.RE
.SH "COPYRIGHT"
.br
Copyright \(co 2004, 2005, 2006, 2007, 2008, 2009, 2010 Eelco Dolstra
.br
